/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    require-prior-idle-ms = <100>;
    quick-tap-ms = <200>;
    tapping-term-ms = <300>;
    flavor = "balanced";
};

&mt {
    require-prior-idle-ms = <100>;
    quick-tap-ms = <200>;
    tapping-term-ms = <300>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        jk_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
        };
    };

    behaviors {
        mt_left: mt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 18 30 31 19 7 8 32 33 21 9 20 34 22 10 39 40 41>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
        };

        mt_right: mt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 17 16 15 14 13 25 26 27 28 29 38 37 36>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q                &kp W                &kp E                    &kp R                  &kp T          &kp Y        &kp U                   &kp I                     &kp O                 &kp P                         &none
&none  &mt_left LEFT_GUI A  &mt_left LEFT_ALT S  &mt_left LEFT_CONTROL D  &mt_left LEFT_SHIFT F  &kp G          &kp H        &mt_right LEFT_SHIFT J  &mt_right LEFT_CONTROL K  &mt_right LEFT_ALT L  &mt_right LEFT_GUI SEMICOLON  &none
&none  &mt LSHFT Z          &kp X                &kp C                    &kp V                  &kp B          &kp N        &kp M                   &kp COMMA                 &kp DOT               &mt RIGHT_SHIFT FSLH          &none
                                                 &lt 4 ESCAPE             &lt 3 TAB              &lt 1 SPACE    &lt 2 ENTER  &kp BACKSPACE           &kp DELETE
            >;
        };

        Num {
            bindings = <
&none  &trans         &trans        &trans            &trans          &trans    &kp LEFT_BRACKET  &kp N7        &kp N8        &kp N9        &kp ASTERISK  &none
&none  &kp LEFT_META  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans    &kp EQUAL         &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS      &none
&none  &trans         &trans        &trans            &trans          &trans    &kp BACKSLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS     &none
                                    &trans            &trans          &trans    &kp PERIOD        &kp N0        &kp DOT
            >;
        };

        Sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp ASTERISK  &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PERCENT         &trans  &trans           &trans             &trans         &trans          &none
&none  &kp HASH      &kp DOLLAR     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE           &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_META  &none
&none  &kp TILDE     &kp BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SINGLE_QUOTE    &trans  &trans           &trans             &trans         &trans          &none
                                    &kp EXCLAMATION       &kp EQUAL              &kp UNDERSCORE      &trans  &trans           &trans
            >;
        };

        Media {
            bindings = <
&none  &trans         &trans        &trans            &trans          &trans    &trans          &trans            &trans             &trans           &trans      &none
&none  &kp LEFT_META  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans    &kp LEFT_ARROW  &kp C_PREVIOUS    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &none
&none  &trans         &trans        &trans            &trans          &trans    &trans          &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2     &trans      &none
                                    &trans            &trans          &trans    &kp C_STOP      &kp C_PLAY_PAUSE  &kp C_MUTE
            >;
        };

        Navigation {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp K_REDO  &kp K_PASTE    &kp K_COPY  &kp K_CUT  &kp K_UNDO  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT    &kp DOWN       &kp UP      &kp RIGHT  &trans      &trans
&trans  &trans    &trans    &trans     &trans     &trans    &kp HOME    &kp PAGE_DOWN  &kp PG_UP   &kp END    &trans      &trans
                            &trans     &trans     &trans    &trans      &trans         &trans
            >;
        };
    };
};
